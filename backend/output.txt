import torch
import torch.nn as nn
import torch.nn.functional as F

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()

        self.block1 = nn.Sequential(
            nn.Conv2d(in_channels = 3, out_channels = 32, kernel_size = 3, stride = 2, padding = 1),
            nn.ReLU(),
            nn.Dropout(p = 0.2),
            nn.Conv2d(in_channels = 32, out_channels = 64, kernel_size = 3, stride = 2, padding = 1),
            nn.Dropout(p = 0.2),
            nn.Conv2d(in_channels = 64, out_channels = 128, kernel_size = 3, stride = 2, padding = 1),
            nn.Dropout(p = 0.2),
            nn.Flatten(start_dim= 1),
            nn.Linear(in_features = 1024, out_features = 512),
            nn.ReLU(),
            nn.Dropout(p = 0.2),
            nn.Linear(in_features = 512, out_features = 128),
            nn.Tanh(),
            nn.Dropout(p = 0.2),
            nn.Linear(in_features = 128, out_features = 10),
            nn.Dropout(p = 0.1),
            
        )

    def forward(self, x):
        return self.fc(x)